
import os
import sys
import logging
import random
import asyncio
import pytz
import requests
from Script import script
from datetime import datetime
from telegraph import Telegraph
from pyrogram import Client, filters, enums
from pyrogram.errors import ChatAdminRequired, FloodWait
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from database.ia_filterdb import Media, get_file_details, unpack_new_file_id, get_bad_files
from database.users_chats_db import db
from database.top_search import db3
from database.safaridev import db2
from info import *
from utils import get_settings, get_size, is_subscribed, save_group_settings, temp, verify_user, check_token, check_verification, get_token, send_all, get_tutorial, get_shortlink, get_seconds
from database.connections_mdb import active_connection
import re
import json
import base64
from plugins.verification import validate_token, is_user_verified, send_verification

logger = logging.getLogger(__name__)

TIMEZONE = "Asia/Kolkata"
BATCH_FILES = {}

@Client.on_message(filters.command("start") & filters.incoming)
async def start(client, message):
    try:
        if hasattr(message, 'command') and len(message.command) == 2: 
            data = message.command[1]
            if data.split("-")[0] == 'verify':
                await validate_token(client, message, data)
                return
        if not await is_user_verified(message.from_user.id):
            await send_verification(client, message)
            return
        
        if message.chat.type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
            buttons = [[
                        InlineKeyboardButton('‚òÜ ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚òÜ', url=f'http://t.me/{temp.U_NAME}?startgroup=true')
                    ],[
                        InlineKeyboardButton('üçÅ  ú·¥è·¥° ·¥õ·¥è ·¥úÍú±·¥á üçÅ', url="https://t.me/{temp.U_NAME}?start=help")
                      ]]
            reply_markup = InlineKeyboardMarkup(buttons)
            current_time = datetime.now(pytz.timezone(TIMEZONE))
            curr_time = current_time.hour        
            if curr_time < 12:
                gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
            elif curr_time < 17:
                gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
            elif curr_time < 21:
                gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
            else:
                gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"
            # m=await message.reply_sticker("CAACAgUAAxkBAAEkohxmOzL_8-HJRwudONzAED-tMt27LQACRwADJpleD38508ect3TIHgQ") 
            # await asyncio.sleep(2)
            # await m.delete()
            await message.reply_photo(
                photo=(PICS),
                caption=script.START_TXT.format(message.from_user.mention, gtxt, temp.U_NAME, temp.B_NAME),
                reply_markup=reply_markup,
                parse_mode=enums.ParseMode.HTML
            )
            await asyncio.sleep(2) # üò¢ https://github.com/EvamariaTG/EvaMaria/blob/master/plugins/p_ttishow.py#L17 üò¨ wait a bit, before checking.
            if not await db.get_chat(message.chat.id):
                total=await client.get_chat_members_count(message.chat.id)
                await client.send_message(LOG_CHANNEL, script.LOG_TEXT_G.format(temp.B_NAME, message.chat.title, message.chat.id, total, "Unknown"))       
                await db.add_chat(message.chat.id, message.chat.title)
            return 
        if not await db.is_user_exist(message.from_user.id):
            await db.add_user(message.from_user.id, message.from_user.first_name)
            await client.send_message(LOG_CHANNEL, script.LOG_TEXT_P.format(message.from_user.id, message.from_user.mention, temp.B_NAME))
        if len(message.command) != 2:
            buttons = [[
                        InlineKeyboardButton('‚õ©Ô∏è ùñ•ùóÇùóÖùóÜùóí ùñ¨ùñæùóá', url=f'http://telegram.me/{temp.U_NAME}?startgroup=true')
                    ],[
                        InlineKeyboardButton('üé´ ùñØùóãùñæùóÜùóÇùóéùóÜ', callback_data='seeplans),
                        InlineKeyboardButton('ü™ê ùñ¶ùóãùóàùóéùóâ', url=GRP_LNK)                       
                    ],[
                        InlineKeyboardButton('‚ö†Ô∏è ùñ£ùñ®ùóåùñºùóÖùñ∫ùóÇùóÜùñæùóã', callback_data='disclaimer'),
                        InlineKeyboardButton('üí≤ ùñ†ùñΩùóÜùóÇùóá', url=f'https://t.me/GojoXSandman_Bot')
                        ]]
            if IS_VERIFY or IS_SHORTLINK is True:
                buttons.append([
                    InlineKeyboardButton(' ô·¥ú è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ', callback_data='seeplans')
                ])
            if TOP_SEARCH is True:
                buttons.append([
                    InlineKeyboardButton("üéÅ ·¥ç·¥è·¥†…™·¥á s·¥ú…¢…¢·¥ás·¥õ…™·¥è…¥'s üéÅ", callback_data='movie_suggestion')
                ])
            reply_markup = InlineKeyboardMarkup(buttons)
            current_time = datetime.now(pytz.timezone(TIMEZONE))
            curr_time = current_time.hour        
            if curr_time < 12:
                gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
            elif curr_time < 17:
                gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
            elif curr_time < 21:
                gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
            else:
                gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"
            # m=await message.reply_sticker("CAACAgUAAxkBAAEkohxmOzL_8-HJRwudONzAED-tMt27LQACRwADJpleD38508ect3TIHgQ") 
            # await asyncio.sleep(2)
            # await m.delete()
            await message.reply_photo(
                photo=random.choice(PICS),
                caption=script.START_TXT.format(message.from_user.mention, gtxt, temp.U_NAME, temp.B_NAME),
                reply_markup=reply_markup,
                parse_mode=enums.ParseMode.HTML
            )
            return
        if AUTH_CHANNEL and not await is_subscribed(client, message):
            # try:
            #     invite_link = await client.create_chat_invite_link(int(AUTH_CHANNEL))
            # except ChatAdminRequired:
            #     logger.error("M·¥Ä·¥ã·¥á s·¥ú Ä·¥á B·¥è·¥õ …™s ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ F·¥è Ä·¥Ñ·¥ás·¥ú ô ·¥Ñ ú·¥Ä…¥…¥·¥á ü")
            #     return
            btn = [[
                InlineKeyboardButton("C ú·¥Ä…¥…¥·¥á ü 1", url=f't.me/FILMY_MEN')
              ]]
    
            if message.command[1] != "subscribe":
                try:
                    kk, file_id = message.command[1].split("_", 1)
                    pre = 'checksubp' if kk == 'filep' else 'checksub' 
                    btn.append([InlineKeyboardButton("‚Üª T Ä è A…¢·¥Ä…™…¥", url=f"https://t.me/{temp.U_NAME}?start={message.command[1]}")])
                except (IndexError, ValueError):
                    btn.append([InlineKeyboardButton("‚Üª T Ä è A…¢·¥Ä…™…¥", url=f"https://t.me/{temp.U_NAME}?start={message.command[1]}")])
            await client.send_message(
                chat_id=message.from_user.id,
                text="**Y·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ …™…¥ ·¥è·¥ú Ä B·¥Ä·¥Ñ·¥ã-·¥ú·¥ò ·¥Ñ ú·¥Ä…¥…¥·¥á ü …¢…™·¥†·¥á…¥  ô·¥á ü·¥è·¥° s·¥è  è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ …¢·¥á·¥õ ·¥õ ú·¥á ·¥ç·¥è·¥†…™·¥á “ì…™ ü·¥á, ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥ä·¥è…™…¥ ·¥Ä…¥·¥Ö ·¥ç·¥è·¥†…™·¥á “ì…™ ü·¥á...‚úÖ**",
                reply_markup=InlineKeyboardMarkup(btn),
                parse_mode=enums.ParseMode.MARKDOWN
                )
            return
        if len(message.command) == 2 and message.command[1] in ["subscribe", "error", "okay", "help"]:
            buttons = [[
                        InlineKeyboardButton('‚õ©Ô∏è ùñ•ùóÇùóÖùóÜùóí ùñ¨ùñæùóá', url=f'https://t.me/FILMY_MEN')
                    ],[
                        InlineKeyboardButton('üé´ ùñØùóãùñæùóÜùóÇùóéùóÜ', callback_data='seeplans),
                        InlineKeyboardButton('ü™ê ùñ¶ùóãùóàùóéùóâ', url=GRP_LNK)                        
                    ],[
                       InlineKeyboardButton('‚ö†Ô∏è ùñ£ùñ®ùóåùñºùóÖùñ∫ùóÇùóÜùñæùóã', callback_data='disclaimer'),
                       InlineKeyboardButton('üí≤ ùñ†ùñΩùóÜùóÇùóá ', url=f'https://t.me/GojoXSandman_Bot')
                        ]]
            if IS_VERIFY or IS_SHORTLINK is True:
                buttons.append([
                    InlineKeyboardButton(' ô·¥ú è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç', callback_data='seeplans')
                ])
            if TOP_SEARCH is True:
                buttons.append([
                    InlineKeyboardButton("üéÅ ·¥ç·¥è·¥†…™·¥á s·¥ú…¢…¢·¥ás·¥õ…™·¥è…¥'s üéÅ", callback_data='movie_suggestion')
                ])
            reply_markup = InlineKeyboardMarkup(buttons)
            current_time = datetime.now(pytz.timezone(TIMEZONE))
            curr_time = current_time.hour        
            if curr_time < 12:
                gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
            elif curr_time < 17:
                gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
            elif curr_time < 21:
                gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
            else:
                gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"
            # m=await message.reply_sticker("CAACAgUAAxkBAAEkohxmOzL_8-HJRwudONzAED-tMt27LQACRwADJpleD38508ect3TIHgQ") 
            # await asyncio.sleep(2)
            # await m.delete()
            await message.reply_photo(
                photo=random.choice(PICS),
                caption=script.START_TXT.format(message.from_user.mention, gtxt, temp.U_NAME, temp.B_NAME),
                reply_markup=reply_markup,
                parse_mode=enums.ParseMode.HTML
            )
            return
        if len(message.command) == 2 and message.command[1] in ["premium"]:
            buttons = [[
                        InlineKeyboardButton('üì≤ Íú±·¥á…¥·¥Ö ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ Íú±·¥Ñ Ä·¥á·¥á…¥Íú± ú·¥è·¥õ', url=f"https://t.me/Gojo_SatoruJi")
                      ],[
                        InlineKeyboardButton('‚ùå ·¥Ñ ü·¥èÍú±·¥á ‚ùå', callback_data='close_data')
                      ]]
            reply_markup = InlineKeyboardMarkup(buttons)
            await message.reply_photo(
                photo=(SUBSCRIPTION),
                caption=script.PREPLANS_TXT.format(message.from_user.mention),
                reply_markup=reply_markup,
                parse_mode=enums.ParseMode.HTML
            )
            return  
        if message.command[1].startswith("reff_"):
            try:
                user_id = int(message.command[1].split("_")[1])
            except ValueError:
                await message.reply_text("Invalid refer!")
                return
            if user_id == message.from_user.id:
                await message.reply_text("Y·¥è·¥ú C·¥Ä…¥'·¥õ R·¥á“ì·¥á Ä Y·¥è·¥ú Äs·¥á ü“ì ü§£!\n\n‡§µ‡•ã ‡§≤‡§ø‡§Ç‡§ï ‡§ï‡§ø‡§∏‡•Ä ‡§î‡§∞ ‡§ï‡•ã ‡§≠‡•á‡§ú‡•á....!!\n\n‡§ï‡•ã‡§à ‡§≠‡•Ä 10 ‡§≤‡•ã‡§ó ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§Ç‡§ï ‡§™‡•á ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á ‡§§‡•ã ‡§Ü‡§™‡§ï‡•ã 1 month ‡§´‡•ç‡§∞‡•Ä ‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ...‚úÖ")
                return
            if db2.is_user_in_list(message.from_user.id):
                await message.reply_text("‡§Ü‡§™ ‡§™‡§π‡§≤‡•á ‡§≠‡•Ä ‡§á‡§∏ bot ‡§ï‡§æ use ‡§ï‡§∞ ‡§ö‡•Å‡§ï‡•á ‡§π‡•à....ü´†")
                return
            try:
                uss = await client.get_users(user_id)
            except Exception:
                return 	    
            db2.add_user(message.from_user.id)
            fromuse = db2.get_refer_points(user_id) + 10
            db2.add_refer_points(user_id, fromuse)
            await message.reply_text(f"<b>My Name Is Itachi‚ö°.\n\nI am provide Movie & Series ü•≤, Just Send Movie Name & Get in Two Seconds üåø.\n\ninvited by {uss.mention}</b>")
            await client.send_message(user_id, f"<b>Congratulations ü•≥ You won 10 Referral point because You Invited {message.from_user.mention}</b>") 
            if fromuse == USER_POINT:
                await db.give_referal(user_id)
                db2.add_refer_points(user_id, 0) 
                await client.send_message(chat_id=user_id,
                    text=f"<b>·¥Ñ·¥è…¥…¢ Ä·¥Ä·¥õ·¥ú ü·¥Ä·¥õ…™·¥è…¥Íú± {uss.mention} ü•≥\n\n è·¥è·¥ú …¢·¥è·¥õ 1 ·¥ç·¥è…¥·¥õ ú ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç....üåø\n ô·¥á·¥Ñ·¥Ä·¥úÍú±·¥á  è·¥è·¥ú …™…¥·¥†·¥Ä ü…™·¥Ö 10 ·¥úÍú±·¥á ÄÍú±....üòò\n\nYour Premium Ditels --> /myplan </b>", disable_web_page_preview=True              
                    )
                for admin in ADMINS:
                    await client.send_message(chat_id=REQST_CHANNEL, text=f"S·¥ú·¥Ñ·¥Ñ·¥áss “ì·¥ú ü ü è reffral ·¥õ·¥Äs·¥ã ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö  ô è ·¥õ ú…™s ·¥ús·¥á Ä:\n\nuser N·¥Ä·¥ç·¥á: {uss.mention}\n\nUs·¥á Ä …™·¥Ö: {uss.id}!")	
                return
        if message.command[1] == "movie_suggestion":
            if TOP_SEARCH is True:
                m = await message.reply_text(f"<b>Finding Movie's List For You...üòò</b>")
                top_messages = await db3.get_top_messages(30)

                truncated_messages = set()  # Use a set instead of a list
                for msg in top_messages:
                    if len(msg) > 30:
                        truncated_messages.add(msg[:30 - 3].lower().title() + "...")  # Convert to lowercase, capitalize and add to set
                    else:
                        truncated_messages.add(msg.lower().title())  # Convert to lowercase, capitalize and add to set

                keyboard = []
                for i in range(0, len(truncated_messages), 2):
                    row = list(truncated_messages)[i:i+2]  # Convert set to list for indexing
                    keyboard.append(row)
    
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True, placeholder="Most searches of the day")
                sf=await message.reply_text(f"<b> ú·¥á Ä·¥á …™s ·¥õ ú Ä  ü…™s·¥õ ·¥è“ì ·¥ç·¥è·¥†…™·¥á's …¥·¥Ä·¥ç·¥á üëáüëá</b>", reply_markup=reply_markup)
                await m.delete()
                await asyncio.sleep(60*60) 
                await sf.delete()
                return
            else:
                await message.reply("·¥õ·¥è·¥ò s·¥á·¥Ä Ä·¥Ñ ú·¥ás ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥è“ì“ì")
        data = message.command[1]
        try:
            pre, file_id = data.split('_', 1)
        except:
            file_id = data
            pre = ""
        if data.split("-", 1)[0] == "BATCH":
            sts = await message.reply("<b>P ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...</b>")
            file_id = data.split("-", 1)[1]
            msgs = BATCH_FILES.get(file_id)
            if not msgs:
                file = await client.download_media(file_id)
                try: 
                    with open(file) as file_data:
                        msgs=json.loads(file_data.read())
                except:
                    await sts.edit("F·¥Ä…™ ü·¥á·¥Ö")
                    return await client.send_message(LOG_CHANNEL, "U…¥·¥Ä ô ü·¥á T·¥è O·¥ò·¥á…¥ F…™ ü·¥á.")
                os.remove(file)
                BATCH_FILES[file_id] = msgs
            for msg in msgs:
                title = msg.get("title")
                size=get_size(int(msg.get("size", 0)))
                f_caption=msg.get("caption", "")
                if BATCH_FILE_CAPTION:
                    try:
                        f_caption=BATCH_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='' if f_caption is None else f_caption)
                    except Exception as e:
                        logger.exception(e)
                        f_caption=f_caption
                if f_caption is None:
                    f_caption = f"{title}"
                try:
                    await client.send_cached_media(
                        chat_id=message.from_user.id,
                        file_id=msg.get("file_id"),
                        caption=f_caption,
                        protect_content=msg.get('protect', False),
                        reply_markup=InlineKeyboardMarkup(
                            [
                             [
                              InlineKeyboardButton("üñ•Ô∏è ·¥°·¥Ä·¥õ·¥Ñ ú & ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üì•", callback_data=f"streaming#{file_id}")
                           ],[
                            InlineKeyboardButton("üåπ  Ä·¥á“ì“ì·¥á Ä üåπ", url='https://t.me/gojo_fmAutobot?start=reffer'),
                            InlineKeyboardButton('‚ùå ·¥Ñ ü·¥èÍú±·¥á ‚ùå', callback_data='close_data')
                        ]
                             ]
                        )
                    )
                except FloodWait as e:
                    await asyncio.sleep(e.x)
                    logger.warning(f"Floodwait of {e.x} sec.")
                    await client.send_cached_media(
                        chat_id=message.from_user.id,
                        file_id=msg.get("file_id"),
                        caption=f_caption,
                        protect_content=msg.get('protect', False),
                        reply_markup=InlineKeyboardMarkup(
                            [
                             [
                              InlineKeyboardButton("üñ•Ô∏è ·¥°·¥Ä·¥õ·¥Ñ ú & ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üì•", callback_data=f"streaming#{file_id}")
                              
                           ],[
                              
                            InlineKeyboardButton('üîô ·¥Ñ ü·¥èÍú±·¥á üîö', callback_data='close_data')
                             ]
                            ]
                        )
                    )
                except Exception as e:
                    logger.warning(e, exc_info=True)
                    continue
                await asyncio.sleep(1) 
            await sts.delete()
            return
        elif data.split("-", 1)[0] == "DSTORE":
            sts = await message.reply("<b>P ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...</b>")
            b_string = data.split("-", 1)[1]
            decoded = (base64.urlsafe_b64decode(b_string + "=" * (-len(b_string) % 4))).decode("ascii")
            try:
                f_msg_id, l_msg_id, f_chat_id, protect = decoded.split("_", 3)
            except:
                f_msg_id, l_msg_id, f_chat_id = decoded.split("_", 2)
                protect = "/pbatch" if PROTECT_CONTENT else "batch"
            diff = int(l_msg_id) - int(f_msg_id)
            async for msg in client.iter_messages(int(f_chat_id), int(l_msg_id), int(f_msg_id)):
                if msg.media:
                    media = getattr(msg, msg.media.value)
                    if BATCH_FILE_CAPTION:
                        try:
                            f_caption=BATCH_FILE_CAPTION.format(file_name=getattr(media, 'file_name', ''), file_size=getattr(media, 'file_size', ''), file_caption=getattr(msg, 'caption', ''))
                        except Exception as e:
                            logger.exception(e)
                            f_caption = getattr(msg, 'caption', '')
                    else:
                        media = getattr(msg, msg.media.value)
                        file_name = getattr(media, 'file_name', '')
                        f_caption = getattr(msg, 'caption', file_name)
                    try:
                        await msg.copy(message.chat.id, caption=f_caption, protect_content=True if protect == "/pbatch" else False)
                    except FloodWait as e:
                        await asyncio.sleep(e.x)
                        await msg.copy(message.chat.id, caption=f_caption, protect_content=True if protect == "/pbatch" else False)
                    except Exception as e:
                        logger.exception(e)
                        continue
                elif msg.empty:
                    continue
                else:
                    try:
                        await msg.copy(message.chat.id, protect_content=True if protect == "/pbatch" else False)
                    except FloodWait as e:
                        await asyncio.sleep(e.x)
                        await msg.copy(message.chat.id, protect_content=True if protect == "/pbatch" else False)
                    except Exception as e:
                        logger.exception(e)
                        continue
                await asyncio.sleep(1) 
            return await sts.delete()
                    
        elif data.split("-", 1)[0] == "verify":
            userid = data.split("-", 2)[1]
            token = data.split("-", 3)[2]
            fileid = data.split("-", 3)[3]
            if str(message.from_user.id) != str(userid):
                return await message.reply_text(
                    text="<b>I…¥·¥†·¥Ä ü…™·¥Ö  ü…™…¥·¥ã ·¥è Ä Ex·¥ò…™ Ä·¥á·¥Ö  ü…™…¥·¥ã !</b>",
                    protect_content=True if PROTECT_CONTENT else False
                )
            is_valid = await check_token(client, userid, token)
            if is_valid == True:
                if fileid == "all":
                    btn = [[
                        InlineKeyboardButton("G·¥á·¥õ F…™ ü·¥á", callback_data=f"checksub#send_all")
                    ]]
                    await verify_user(client, userid, token)
                    await message.reply_text(
                        text=f"<b>H·¥á è {message.from_user.mention}, Y·¥è·¥ú ·¥Ä Ä·¥á s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥†·¥á Ä…™“ì…™·¥á·¥Ö !\nN·¥è·¥°  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥áss “ì·¥è Ä ·¥Ä ü ü ·¥ç·¥è·¥†…™·¥ás ·¥õ…™ ü ü ·¥õ ú·¥á …¥·¥áx·¥õ ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ ·¥° ú…™·¥Ñ ú …™s ·¥Ä“ì·¥õ·¥á Ä 12  ú·¥è·¥ú Äs “ì Ä·¥è·¥ç …¥·¥è·¥°.</b>",
                        protect_content=True if PROTECT_CONTENT else False,
                        reply_markup=InlineKeyboardMarkup(btn)
                    )
                    return
                btn = [[
                    InlineKeyboardButton("Get File", url=f"https://telegram.me/{temp.U_NAME}?start=files_{fileid}")
                ]]
                await message.reply_text(
                    text=f"<b>H·¥á è {message.from_user.mention}, Y·¥è·¥ú ·¥Ä Ä·¥á s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥†·¥á Ä…™“ì…™·¥á·¥Ö !\nN·¥è·¥°  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥áss “ì·¥è Ä ·¥Ä ü ü ·¥ç·¥è·¥†…™·¥ás ·¥õ…™ ü ü ·¥õ ú·¥á …¥·¥áx·¥õ ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ ·¥° ú…™·¥Ñ ú …™s ·¥Ä“ì·¥õ·¥á Ä 12  ú·¥è·¥ú Äs “ì Ä·¥è·¥ç …¥·¥è·¥°.</b>",
                    protect_content=True if PROTECT_CONTENT else False,
                    reply_markup=InlineKeyboardMarkup(btn)
                )
                await verify_user(client, userid, token)
                return
            else:
                return await message.reply_text(
                    text="<b>I…¥·¥†·¥Ä ü…™·¥Ö  ü…™…¥·¥ã ·¥è Ä Ex·¥ò…™ Ä·¥á·¥Ö  ü…™…¥·¥ã !</b>",
                    protect_content=True if PROTECT_CONTENT else False
                )

        if data.startswith("TheHappyHour"):
            btn = [[
                InlineKeyboardButton('üì∏ s·¥á…¥·¥Ö s·¥Ñ Ä·¥á·¥á…¥s ú·¥è·¥õ üì∏', url="https://t.me/GojoXSandman_Bot")
            ],[
                InlineKeyboardButton('‚òòÔ∏è Íú∞·¥ú·¥õ·¥ú Ä·¥á ‚òòÔ∏è', url="https://graph.org/The-Happy-Hour-12-22-2"),
                InlineKeyboardButton('üîô ·¥Ñ ü·¥èÍú±·¥á üîö', callback_data='close_data')
            ]]
            reply_markup = InlineKeyboardMarkup(btn)
            await message.reply_photo(
            photo="https://te.legra.ph/file/f21806ce37bec0a9ae408.jpg",
            caption="""<b>
        <a href='https://graph.org/The-Happy-Hour-12-22-2'>üí• ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ò Ä…™·¥Ñ·¥á üí•
        
1 W·¥á·¥á·¥ã = 30 Rs
1 M·¥è…¥·¥õ ú = 60Rs
2 M·¥è…¥·¥õ ú = 100Rs

üéÅ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç Íú∞·¥ú·¥õ·¥ú Ä·¥á ·¥Ñ ü…™·¥Ñ·¥ã\n ú·¥á·¥Ä Ä·¥á ·¥õ·¥è  Ä·¥á·¥Ä·¥Ö
„Ö§„Ö§„Ö§„Ö§„Ö§</a></b>""",
                reply_markup=reply_markup
            )
            return

        if data.startswith("reffer"):
            user_id = message.from_user.id
            total = db2.get_refer_points(user_id)

            btn = [[
                InlineKeyboardButton(f"invite üîó", url=f"https://telegram.me/share/url?url=https://telegram.me/{temp.U_NAME}=reff_{user_id}"),
                InlineKeyboardButton(f"‚è≥{total}", callback_data=f"show_reff"),
                InlineKeyboardButton('üîô ·¥Ñ ü·¥èÍú±·¥á üîö', callback_data='close_data')
            ]]
            reply_markup = InlineKeyboardMarkup(btn)
            await message.reply_photo(
            photo="https://i2f9m2t2.rocketcdn.me/wp-content/uploads/2014/04/shutterstock_175386392.jpg",
            caption=f"<b> Ä·¥á“ì·¥á Ä Ä·¥á  è·¥è·¥ú Ä  ü…™…¥·¥ã ·¥õ·¥è  è·¥è·¥ú Ä “ì Ä…™·¥á…¥·¥Ös, “ì·¥Ä·¥ç…™ ü è, ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä…¥·¥Ö …¢ Ä·¥è·¥ú·¥ò ·¥õ·¥è …¢·¥á·¥õ “ì Ä·¥á·¥á ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç “ì·¥è Ä 1 ·¥ç·¥è…¥·¥õ ú\n\n Ä·¥á“ì·¥á Ä·¥Ä ü  ü…™…¥·¥ã - https://telegram.me/{temp.U_NAME}?start=reff_{user_id}\n\ns ú·¥Ä Ä·¥á ·¥õ ú…™s  ü…™…¥·¥ã ·¥°…™·¥õ ú  è·¥è·¥ú Ä “ì Ä…™·¥á…¥·¥Ös, ·¥á·¥Ä·¥Ñ ú ·¥õ…™·¥ç·¥á ·¥õ ú·¥á è ·¥ä·¥è…™…¥,   è·¥è·¥ú ·¥°…™ ü ü …¢·¥á·¥õ 10  Ä·¥á“ì“ì·¥á Ä·¥Ä ü ·¥ò·¥è…™…¥·¥õs ·¥Ä…¥·¥Ö ·¥Ä“ì·¥õ·¥á Ä {USER_POINT} ·¥ò·¥è…™…¥·¥õs  è·¥è·¥ú ·¥°…™ ü ü …¢·¥á·¥õ 1 ·¥ç·¥è…¥·¥õ ú ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥.\n\n ô·¥ú è ·¥ò·¥Ä…™·¥Ö ·¥ò ü·¥Ä…¥  ô è - /premium</b>",
                reply_markup=reply_markup
            )
            return
        
        if data.startswith("sendfiles"):
            chat_id = int("-" + file_id.split("-")[1])
            userid = message.from_user.id if message.from_user else None
            g = await get_shortlink(chat_id, f"https://telegram.me/{temp.U_NAME}?start=allfiles_{file_id}")
            k = await client.send_message(chat_id=message.from_user.id,text=f"<b>Get All Files in a Single Click!!!\n\nüìÇ  ü…™…¥·¥ã ‚û† : {g}</b>", reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton('üìÅ ·¥ç·¥è·¥†…™·¥á ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ü…™…¥·¥ã üìÅ', url=g)
                        ], [
                            InlineKeyboardButton('ü§î H·¥è·¥° T·¥è D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ü§î', url=await get_tutorial(chat_id))
                        ]
                    ]
                )
            )
            return
        elif data.startswith("short"):
            user = message.from_user.id
            if temp.SHORT.get(user)==None:
                await message.reply_text("·¥Ö·¥è…¥'·¥õ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è·¥õ ú·¥á Ä  Ä·¥ás·¥ú ü·¥õ") 
            else:
                chat_id = temp.SHORT.get(message.from_user.id)
            settings = await get_settings(chat_id)
            if settings['is_shortlink'] and not await db.has_premium_access(message.from_user.id):
                files_ = await get_file_details(file_id)
                files = files_[0]
                g = await get_shortlink(chat_id, f"https://telegram.me/{temp.U_NAME}?start=file_{file_id}")
                k = await client.send_message(chat_id=message.from_user.id,text=f"<b>üìïN·¥Ä·¥ç·¥á ‚û† : <code>{files.file_name}</code> \n\nüîóS…™·¥¢·¥á ‚û† : {get_size(files.file_size)}\n\nüìÇF…™ ü·¥á  ü…™…¥·¥ã ‚û† : {g}.</i></b>", 
                reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton('üìÇ ·¥ç·¥è·¥†…™·¥á ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ü…™…¥·¥ã üìÇ', url=g)], 
                            [InlineKeyboardButton('ü§î H·¥è·¥° T·¥è D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ü§î', url=await get_tutorial(chat_id))]]))
                return
            else:
                files = await get_file_details(file_id)
                if not files:
                    return await message.reply('<b><i>N·¥è S·¥ú·¥Ñ ú F…™ ü·¥á E·¥áx…™s·¥õ.</b></i>')
                filesarr = []
                for file in files:
                    file_id = file.file_id
                    files_ = await get_file_details(file_id)
                    files = files_[0]
                    title = ' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), files.file_name.split()))
                    size=get_size(files.file_size)
                    f_caption=files.caption
                    if CUSTOM_FILE_CAPTION:
                        try:
                            f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='' if f_caption is None else f_caption)
                        except Exception as e:
                            logger.exception(e)
                            f_caption=f_caption
                    if f_caption is None:
                        f_caption = f"{' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), files.file_name.split()))}"
                msg=await client.send_cached_media(
                    chat_id=message.from_user.id,
                    file_id=file_id, 
                    caption=f_caption, 
                    protect_content=True if pre == 'filep' else False, 
                    reply_markup=InlineKeyboardMarkup([
                         [
                          InlineKeyboardButton("üñ•Ô∏è ·¥°·¥Ä·¥õ·¥Ñ ú / ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üì•", callback_data=f"streaming#{file_id}")
                         ]
               ]))
                return 
        elif data.startswith("all"):
            files = temp.GETALL.get(file_id)
            if not files:
                return await message.reply('<b><i>N·¥è S·¥ú·¥Ñ ú F…™ ü·¥á E·¥áx…™s·¥õ.</b></i>')
            filesarr = []
            for file in files:
                file_id = file.file_id
                files_ = await get_file_details(file_id)
                files1 = files_[0]
                title = ' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), files1.file_name.split()))
                size=get_size(files1.file_size)
                f_caption=files1.caption
                if CUSTOM_FILE_CAPTION:
                    try:
                        f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='' if f_caption is None else f_caption)
                    except Exception as e:
                        logger.exception(e)
                        f_caption=f_caption
                if f_caption is None:
                    f_caption = f"{' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), files1.file_name.split()))}"
                if IS_VERIFY and not await check_verification(client, message.from_user.id) and not await db.has_premium_access(message.from_user.id):
                    btn = [[
                            InlineKeyboardButton("‚ôªÔ∏è V·¥á Ä…™“ì è ‚ôªÔ∏è", url=await get_token(client, message.from_user.id, f"https://telegram.me/{temp.U_NAME}?start=", file_id)),
                            InlineKeyboardButton("‚ö†Ô∏è H·¥è·¥° T·¥è V·¥á Ä…™“ì è ‚ö†Ô∏è", url=HOW_TO_VERIFY)
                            ],[
                            InlineKeyboardButton("üèïÔ∏è  Ä·¥á·¥ç·¥è·¥†·¥á ·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ üèïÔ∏è", url="https://t.me/gojo_fmAutobot?start=TheHappyHour")
                            ]]
                    await message.reply_text(
                        text="Just Verify One Time And Get Movies For next 12hr without any verification\n\n‡§¨‡§∏ ‡§è‡§ï ‡§¨‡§æ‡§∞ verify ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§¨‡§ø‡§®‡§æ ‡§ï‡§ø‡§∏‡•Ä verification ‡§ï‡•á ‡§Ö‡§ó‡§≤‡•á 12 ‡§ò‡§Ç‡§ü‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡§ø‡§≤‡•ç‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç\n\nClick The Button Below To Check How to Verify ‚úÖ",
                        protect_content=True if pre == 'filep' else False,
                        reply_markup=InlineKeyboardMarkup(btn)
                    )
                    return
                msg = await client.send_cached_media(
                    chat_id=message.from_user.id,
                    file_id=file_id,
                    caption=f_caption,
                    protect_content=True if pre == 'filep' else False,
                    reply_markup=InlineKeyboardMarkup(
                        [
                         [
                          InlineKeyboardButton("üñ•Ô∏è ·¥°·¥Ä·¥õ·¥Ñ ú / ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üì•", callback_data=f"streaming#{file_id}")
                       ],[
                              #InlineKeyboardButton("üåπ  Ä·¥á“ì“ì·¥á Ä üåπ", url='https://t.me/gojo_fmAutobot?start=reffer')       
                             ]
                        ]
                    )
                )
                filesarr.append(msg)
            k = await client.send_message(chat_id = message.from_user.id, text=f"<b><u>‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏èIMPORTANT‚ùóÔ∏èÔ∏è‚ùóÔ∏è‚ùóÔ∏è</u></b>\n\nThis Movie Files/Videos will be deleted in <b><u>10 mins</u> ü´• <i></b>(Due to Copyright Issues)</i>.\n\n<b><i>Please forward this ALL Files/Videos to your Saved Messages and Start Download there</i></b>")
            for x in filesarr:
                await asyncio.sleep(300)
                await x.delete()
            await k.edit_text("<b>Your All Files/Videos is successfully deleted!!!</b>")
            return   
        
        files_ = await get_file_details(file_id)           
        if not files_:
            pre, file_id = ((base64.urlsafe_b64decode(data + "=" * (-len(data) % 4))).decode("ascii")).split("_", 1)
            try:
                
                if IS_VERIFY and not await check_verification(client, message.from_user.id) and not await db.has_premium_access(message.from_user.id):
                    btn = [[
                        InlineKeyboardButton("‚ôªÔ∏è V·¥á Ä…™“ì è ‚ôªÔ∏è", url=await get_token(client, message.from_user.id, f"https://telegram.me/{temp.U_NAME}?start=", file_id)),
                        InlineKeyboardButton("‚ö†Ô∏è H·¥è·¥° T·¥è V·¥á Ä…™“ì è ‚ö†Ô∏è", url=HOW_TO_VERIFY)
                        ],[
                        InlineKeyboardButton("üèïÔ∏è  Ä·¥á·¥ç·¥è·¥†·¥á ·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ üèïÔ∏è", url="https://t.me/gojo_fmAutobot?start=TheHappyHour")
                    ]]
                    await message.reply_text(
                        text="Just Verify One Time And Get Movies For next 12hr without any verification\n\n‡§¨‡§∏ ‡§è‡§ï ‡§¨‡§æ‡§∞ verify ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§¨‡§ø‡§®‡§æ ‡§ï‡§ø‡§∏‡•Ä verification ‡§ï‡•á ‡§Ö‡§ó‡§≤‡•á 12 ‡§ò‡§Ç‡§ü‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡§ø‡§≤‡•ç‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç\n\nClick The Button Below To Check How to Verify ‚úÖ",
                        protect_content=True if PROTECT_CONTENT else False,
                        reply_markup=InlineKeyboardMarkup(btn)
                    )
                    return
                msg = await client.send_cached_media(
                    chat_id=message.from_user.id,
                    file_id=file_id,
                    protect_content=True if pre == 'filep' else False,
                    reply_markup=InlineKeyboardMarkup(
                        [
                         [
                          InlineKeyboardButton("üñ•Ô∏è ·¥°·¥Ä·¥õ·¥Ñ ú & ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üì•", callback_data=f"streaming#{file_id}")
                  
                       ],[
                              #InlineKeyboardButton("üåπ  Ä·¥á“ì“ì·¥á Ä üåπ", url='https://t.me/gojo_fmAutobot?start=reffer'),
                             InlineKeyboardButton('üîô ·¥Ñ ü·¥èÍú±·¥á üîö', callback_data='close_data')
                             ]
                        ]
                    )
                )
                filetype = msg.media
                file = getattr(msg, filetype.value)
                title = ' '.join(filter(lambda x: not x.startswith('Linkz') and not x.startswith('boxoffice') and not x.startswith('Original') and not x.startswith('Villa') and not x.startswith('{') and not x.startswith('Links') and not x.startswith('@') and not x.startswith('www'), file.file_name.split()))
                size=get_size(file.file_size)
                f_caption = f"<code>{title}</code>"
                if CUSTOM_FILE_CAPTION:
                    try:
                        f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='')
                    except:
                        return
                await msg.edit_caption(f_caption)
                del_msg = await message.reply_text("<b>‚ö†Ô∏è·¥õ ú…™s “ì…™ ü·¥á ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä“ì·¥õ·¥á Ä 5 ·¥ç…™…¥·¥ú·¥õ·¥ás\n\n·¥ò ü·¥á·¥Äs·¥á “ì·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú·¥á “ì…™ ü·¥á s·¥è·¥ç·¥á·¥° ú·¥á Ä·¥á  ô·¥á“ì·¥è Ä·¥á ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢..</b>")
                safari = msg
                await asyncio.sleep(300)
                await safari.delete()
                await del_msg.edit_text("<b> è·¥è·¥ú Ä “ì…™ ü·¥á ·¥°·¥Äs ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ä“ì·¥õ·¥á Ä 5 ·¥ç…™…¥·¥ú·¥õ·¥ás ·¥õ·¥è ·¥Ä·¥†·¥è…™·¥Ö ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ üì¢</b>")
                return
            except:
                pass
            return await message.reply('N·¥è s·¥ú·¥Ñ ú “ì…™ ü·¥á ·¥áx…™s·¥õ.')
        files = files_[0]
        title = ' '.join(filter(lambda x: not x.startswith('Linkz') and not x.startswith('{') and not x.startswith('Links') and not x.startswith('boxoffice') and not x.startswith('Original') and not x.startswith('Villa') and not x.startswith('@') and not x.startswith('www'), files.file_name.split()))
        size=get_size(files.file_size)
        f_caption=files.caption
        if CUSTOM_FILE_CAPTION:
            try:
                f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='' if f_caption is None else f_caption)
            except Exception as e:
                logger.exception(e)
                f_caption=f_caption
        if f_caption is None:
            f_caption = f"{' '.join(filter(lambda x: not x.startswith('Linkz') and not x.startswith('{') and not x.startswith('Links')and not x.startswith('boxoffice') and not x.startswith('Original') and not x.startswith('Villa') and not x.startswith('@') and not x.startswith('www'), files.file_name.split()))}"
        
        if IS_VERIFY and not await check_verification(client, message.from_user.id) and not await db.has_premium_access(message.from_user.id):
            btn = [[
                InlineKeyboardButton("‚ôªÔ∏è V·¥á Ä…™“ì è ‚ôªÔ∏è", url=await get_token(client, message.from_user.id, f"https://telegram.me/{temp.U_NAME}?start=", file_id)),
                InlineKeyboardButton("‚ö†Ô∏è H·¥è·¥° T·¥è V·¥á Ä…™“ì è ‚ö†Ô∏è", url=HOW_TO_VERIFY)
                ],[
                InlineKeyboardButton("üèïÔ∏è  Ä·¥á·¥ç·¥è·¥†·¥á ·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ üèïÔ∏è", url="https://t.me/gojo_fmAutobot?start=TheHappyHour")
            ]]
            await message.reply_text(
                text="Just Verify One Time And Get Movies For next 12hr without any verification\n\n‡§¨‡§∏ ‡§è‡§ï ‡§¨‡§æ‡§∞ verify ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§¨‡§ø‡§®‡§æ ‡§ï‡§ø‡§∏‡•Ä verification ‡§ï‡•á ‡§Ö‡§ó‡§≤‡•á 12 ‡§ò‡§Ç‡§ü‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§´‡§ø‡§≤‡•ç‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç\n\nClick The Button Below To Check How to Verify ‚úÖ",
                protect_content=True if PROTECT_CONTENT else False,
                reply_markup=InlineKeyboardMarkup(btn)
            )
            return
        shubhu = await client.send_cached_media(
            chat_id=message.from_user.id,
            file_id=file_id,
            caption=f_caption,
            protect_content=True if pre == 'filep' else False,
            reply_markup=InlineKeyboardMarkup(
                [
                 [
                 InlineKeyboardButton("üñ•Ô∏è ·¥°·¥Ä·¥õ·¥Ñ ú & ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üì•", callback_data=f"streaming#{file_id}")  
                 ],[
                 #InlineKeyboardButton("üåπ  Ä·¥á“ì“ì·¥á Ä üåπ", url='https://t.me/gojo_fmAutobot?start=reffer'),
                 InlineKeyboardButton('üîô ·¥Ñ ü·¥èÍú±·¥á üîö', callback_data='close_data')
                 ]
                ]
            )
        )
        del_msg = await message.reply_text("<b>‚ö†Ô∏è·¥õ ú…™s “ì…™ ü·¥á ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥Ä“ì·¥õ·¥á Ä 5 ·¥ç…™…¥·¥ú·¥õ·¥ás\n\n·¥ò ü·¥á·¥Äs·¥á “ì·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú·¥á “ì…™ ü·¥á s·¥è·¥ç·¥á·¥° ú·¥á Ä·¥á  ô·¥á“ì·¥è Ä·¥á ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢..</b>")
        safari = msg
        await asyncio.sleep(300)
        await shubhu.delete()
        await del_msg.edit_text("<b> è·¥è·¥ú Ä “ì…™ ü·¥á ·¥°·¥Äs ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ä“ì·¥õ·¥á Ä 5 ·¥ç…™…¥·¥ú·¥õ·¥ás ·¥õ·¥è ·¥Ä·¥†·¥è…™·¥Ö ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ üì¢</b>")
        return   
    except Exception as e:
        print (e) 
        await message.reply(f"error found {e}") 
        
@Client.on_message(filters.command('channel') & filters.user(ADMINS))
async def channel_info(bot, message):
           
    """Send basic information of channel"""
    if isinstance(CHANNELS, (int, str)):
        channels = [CHANNELS]
    elif isinstance(CHANNELS, list):
        channels = CHANNELS
    else:
        raise ValueError("U…¥·¥áx·¥ò·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ è·¥ò·¥á ·¥è“ì CHANNELS")

    text = 'üìë **I…¥·¥Ö·¥áx·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á üs/…¢ Ä·¥è·¥ú·¥òs**\n'
    for channel in channels:
        chat = await bot.get_chat(channel)
        if chat.username:
            text += '\n@' + chat.username
        else:
            text += '\n' + chat.title or chat.first_name

    text += f'\n\n**Total:** {len(CHANNELS)}'

    if len(text) < 4096:
        await message.reply(text)
    else:
        file = 'Indexed channels.txt'
        with open(file, 'w') as f:
            f.write(text)
        await message.reply_document(file)
        os.remove(file)


@Client.on_message(filters.command('logs') & filters.user(ADMINS))
async def log_file(bot, message):
    """Send log file"""
    try:
        await message.reply_document('Logs.txt')
    except Exception as e:
        await message.reply(str(e))

@Client.on_message(filters.command('delete') & filters.user(ADMINS))
async def delete(bot, message):
    """Delete file from database"""
    reply = message.reply_to_message
    if reply and reply.media:
        msg = await message.reply("P Ä·¥è·¥Ñ·¥áss…™…¥…¢...‚è≥", quote=True)
    else:
        await message.reply('R·¥á·¥ò ü è ·¥õ·¥è “ì…™ ü·¥á ·¥°…™·¥õ ú /delete ·¥° ú…™·¥Ñ ú  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á', quote=True)
        return

    for file_type in ("document", "video", "audio"):
        media = getattr(reply, file_type, None)
        if media is not None:
            break
    else:
        await msg.edit('T ú…™s …™s …¥·¥è·¥õ s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö “ì…™ ü·¥á “ì·¥è Ä·¥ç·¥Ä·¥õ')
        return
    
    file_id, file_ref = unpack_new_file_id(media.file_id)

    result = await Media.collection.delete_one({
        '_id': file_id,
    })
    if result.deleted_count:
        await msg.edit('F…™ ü·¥á …™s s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö “ì Ä·¥è·¥ç ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á')
    else:
        file_name = re.sub(r"(_|\-|\.|\+)", " ", str(media.file_name))
        result = await Media.collection.delete_many({
            'file_name': file_name,
            'file_size': media.file_size,
            'mime_type': media.mime_type
            })
        if result.deleted_count:
            await msg.edit('F…™ ü·¥á …™s s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö “ì Ä·¥è·¥ç ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á')
        else:
            # files indexed before https://github.com/EvamariaTG/EvaMaria/commit/f3d2a1bcb155faf44178e5d7a685a1b533e714bf#diff-86b613edf1748372103e94cacff3b578b36b698ef9c16817bb98fe9ef22fb669R39 
            # have original file name.
            result = await Media.collection.delete_many({
                'file_name': media.file_name,
                'file_size': media.file_size,
                'mime_type': media.mime_type
            })
            if result.deleted_count:
                await msg.edit('F…™ ü·¥á …™s s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö “ì Ä·¥è·¥ç ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á')
            else:
                await msg.edit('F…™ ü·¥á …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö …™…¥ ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á')


@Client.on_message(filters.command('deleteall') & filters.user(ADMINS))
async def delete_all_index(bot, message):
    await message.reply_text(
        'T ú…™s ·¥°…™ ü ü ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ä ü ü …™…¥·¥Ö·¥áx·¥á·¥Ö “ì…™ ü·¥ás.\nD·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á ?',
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        text="Y·¥ás", callback_data="autofilter_delete"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="C·¥Ä…¥·¥Ñ·¥á ü", callback_data="close_data"
                    )
                ],
            ]
        ),
        quote=True,
    )


@Client.on_callback_query(filters.regex(r'^autofilter_delete'))
async def delete_all_index_confirm(bot, message):
    await Media.collection.drop()
    await message.answer("E·¥†·¥á Ä è·¥õ ú…™…¥…¢'s G·¥è…¥·¥á")
    await message.message.edit('S·¥ú·¥Ñ·¥Ñ·¥ás“ì·¥ú ü ü è D·¥á ü·¥á·¥õ·¥á·¥Ö A ü ü T ú·¥á I…¥·¥Ö·¥áx·¥á·¥Ö F…™ ü·¥ás.')


@Client.on_message(filters.command('settings'))
async def settings(client, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f"Y·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥. Us·¥á /connect {message.chat.id} …™…¥ PM")
    chat_type = message.chat.type

    if chat_type == enums.ChatType.PRIVATE:
        grpid = await active_connection(str(userid))
        if grpid is not None:
            grp_id = grpid
            try:
                chat = await client.get_chat(grpid)
                title = chat.title
            except:
                await message.reply_text("M·¥Ä·¥ã·¥á s·¥ú Ä·¥á I'·¥ç ·¥ò Ä·¥ás·¥á…¥·¥õ …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò !", quote=True)
                return
        else:
            await message.reply_text("I'·¥ç …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è ·¥Ä…¥ è …¢ Ä·¥è·¥ú·¥òs !", quote=True)
            return

    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grp_id = message.chat.id
        title = message.chat.title

    else:
        return

    st = await client.get_chat_member(grp_id, userid)
    if (
            st.status != enums.ChatMemberStatus.ADMINISTRATOR
            and st.status != enums.ChatMemberStatus.OWNER
            and str(userid) not in ADMINS
    ):
        return
    
    settings = await get_settings(grp_id)

    try:
        if settings['max_btn']:
            settings = await get_settings(grp_id)
    except KeyError:
        await save_group_settings(grp_id, 'max_btn', False)
        settings = await get_settings(grp_id)
    if 'is_shortlink' not in settings.keys():
        await save_group_settings(grp_id, 'is_shortlink', False)
    else:
        pass

    if settings is not None:
        buttons = [
            [
                InlineKeyboardButton(
                    'R·¥áÍú±·¥ú ü·¥õ P·¥Ä…¢·¥á',
                    callback_data=f'setgs#button#{settings["button"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    'T·¥áx·¥õ' if settings["button"] else 'B·¥ú·¥õ·¥õ·¥è…¥',
                    callback_data=f'setgs#button#{settings["button"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    'F…™ ü·¥á S·¥á…¥·¥Ö M·¥è·¥Ö·¥á',
                    callback_data=f'setgs#botpm#{settings["botpm"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    'M·¥Ä…¥·¥ú·¥Ä ü S·¥õ·¥Ä Ä·¥õ' if settings["botpm"] else 'A·¥ú·¥õ·¥è S·¥á…¥·¥Ö',
                    callback_data=f'setgs#botpm#{settings["botpm"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    'P Ä·¥è·¥õ·¥á·¥Ñ·¥õ C·¥è…¥·¥õ·¥á…¥·¥õ',
                    callback_data=f'setgs#file_secure#{settings["file_secure"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '‚úî O…¥' if settings["file_secure"] else '‚úò O“ì“ì',
                    callback_data=f'setgs#file_secure#{settings["file_secure"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    'I·¥ç·¥Ö ô',
                    callback_data=f'setgs#imdb#{settings["imdb"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '‚úî O…¥' if settings["imdb"] else '‚úò O“ì“ì',
                    callback_data=f'setgs#imdb#{settings["imdb"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    'S·¥ò·¥á ü ü C ú·¥á·¥Ñ·¥ã',
                    callback_data=f'setgs#spell_check#{settings["spell_check"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '‚úî O…¥' if settings["spell_check"] else '‚úò O“ì“ì',
                    callback_data=f'setgs#spell_check#{settings["spell_check"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    'W·¥á ü·¥Ñ·¥è·¥ç·¥á Ms…¢',
                    callback_data=f'setgs#welcome#{settings["welcome"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '‚úî O…¥' if settings["welcome"] else '‚úò O“ì“ì',
                    callback_data=f'setgs#welcome#{settings["welcome"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    'A·¥ú·¥õ·¥è-D·¥á ü·¥á·¥õ·¥á',
                    callback_data=f'setgs#auto_delete#{settings["auto_delete"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '10 M…™…¥s' if settings["auto_delete"] else '‚úò O“ì“ì',
                    callback_data=f'setgs#auto_delete#{settings["auto_delete"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    'A·¥ú·¥õ·¥è-F…™ ü·¥õ·¥á Ä',
                    callback_data=f'setgs#auto_ffilter#{settings["auto_ffilter"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '‚úî O…¥' if settings["auto_ffilter"] else '‚úò O“ì“ì',
                    callback_data=f'setgs#auto_ffilter#{settings["auto_ffilter"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    'M·¥Äx B·¥ú·¥õ·¥õ·¥è…¥s',
                    callback_data=f'setgs#max_btn#{settings["max_btn"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '10' if settings["max_btn"] else f'{MAX_B_TN}',
                    callback_data=f'setgs#max_btn#{settings["max_btn"]}#{grp_id}',
                ),
            ],
            [
                InlineKeyboardButton(
                    'S ú·¥è Ä·¥õL…™…¥·¥ã',
                    callback_data=f'setgs#is_shortlink#{settings["is_shortlink"]}#{grp_id}',
                ),
                InlineKeyboardButton(
                    '‚úî O…¥' if settings["is_shortlink"] else '‚úò O“ì“ì',
                    callback_data=f'setgs#is_shortlink#{settings["is_shortlink"]}#{grp_id}',
                ),
            ],
        ]

        btn = [[
                InlineKeyboardButton("O·¥ò·¥á…¥ H·¥á Ä·¥á ‚Üì", callback_data=f"opnsetgrp#{grp_id}"),
                InlineKeyboardButton("O·¥ò·¥á…¥ I…¥ PM ‚á≤", callback_data=f"opnsetpm#{grp_id}")
              ]]

        reply_markup = InlineKeyboardMarkup(buttons)
        if chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
            await message.reply_text(
                text="<b>D·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥è·¥ò·¥á…¥ s·¥á·¥õ·¥õ…™…¥…¢s  ú·¥á Ä·¥á ?</b>",
                reply_markup=InlineKeyboardMarkup(btn),
                disable_web_page_preview=True,
                parse_mode=enums.ParseMode.HTML,
                reply_to_message_id=message.id
            )
        else:
            await message.reply_text(
                text=f"<b>C ú·¥Ä…¥…¢·¥á Y·¥è·¥ú Ä S·¥á·¥õ·¥õ…™…¥…¢s F·¥è Ä {title} As Y·¥è·¥ú Ä W…™s ú ‚öô</b>",
                reply_markup=reply_markup,
                disable_web_page_preview=True,
                parse_mode=enums.ParseMode.HTML,
                reply_to_message_id=message.id
            )



@Client.on_message(filters.command('set_template'))
async def save_template(client, message):
    sts = await message.reply("C ú·¥á·¥Ñ·¥ã…™…¥…¢ ·¥õ·¥á·¥ç·¥ò ü·¥Ä·¥õ·¥á...")
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f"Y·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥. Us·¥á /connect {message.chat.id} …™…¥ PM")
    chat_type = message.chat.type

    if chat_type == enums.ChatType.PRIVATE:
        grpid = await active_connection(str(userid))
        if grpid is not None:
            grp_id = grpid
            try:
                chat = await client.get_chat(grpid)
                title = chat.title
            except:
                await message.reply_text("M·¥Ä·¥ã·¥á s·¥ú Ä·¥á I'·¥ç ·¥ò Ä·¥ás·¥á…¥·¥õ …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò!!", quote=True)
                return
        else:
            await message.reply_text("I'·¥ç …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ·¥è ·¥Ä…¥ è …¢ Ä·¥è·¥ú·¥òs!", quote=True)
            return

    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grp_id = message.chat.id
        title = message.chat.title

    else:
        return

    st = await client.get_chat_member(grp_id, userid)
    if (
            st.status != enums.ChatMemberStatus.ADMINISTRATOR
            and st.status != enums.ChatMemberStatus.OWNER
            and str(userid) not in ADMINS
    ):
        return

    if len(message.command) < 2:
        return await sts.edit("N·¥è I…¥·¥ò·¥ú·¥õ!!")
    template = message.text.split(" ", 1)[1]
    await save_group_settings(grp_id, 'template', template)
    await sts.edit(f"S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ñ ú·¥Ä…¥…¢·¥á·¥Ö ·¥õ·¥á·¥ç·¥ò ü·¥Ä·¥õ·¥á “ì·¥è Ä {title} ·¥õ·¥è:\n\n{template}")


@Client.on_message((filters.command(["request", "Request", "Report", "report"]) | filters.regex("#request") | filters.regex("#Request") | filters.regex("#Report") | filters.regex("#report")))
#@Client.on_message(filters.command('request') & filters.incoming & filters.text)
async def requests(client, message):
    search = message.text
    requested_movie = search.replace("/request", "").replace("/Request", "").replace("/Report", "").replace("/report", "").strip()
    user_id = message.from_user.id
    if not requested_movie:
        m=await message.reply_text("<b>‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à ‡§Æ‡•Ç‡§µ‡•Ä ‡§®‡§æ ‡§Æ‡§ø‡§≤‡•á ‡§§‡•ã.....ü§í\n‡§Ü‡§™ Admin ‡§ï‡•ã ‡§∞‡§ø‡§∞‡•ç‡§™‡•ã‡§ü ‡§≠‡•á‡§ú ‡§∏‡§ï‡§§‡•á ‡§π‡•ã...üìö\n‡§á‡§∏ ‡§§‡§∞‡§π ‡§∏‡•á ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§≠‡•á‡§ú‡•á....üëá\n\n/report Pushpa 2021\n/report Chhichhore 2019\n/report Vikings S01 E03\n/report Money Heist S03 E05\n\nüëâ ‡§Æ‡•Ç‡§µ‡•Ä ‡§ï‡§æ year ‡§≠‡•Ä ‡§≤‡§ø‡§ñ‡•á... üëÄ\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n…™Íú∞ ·¥ç·¥è·¥†…™·¥á …¥·¥è·¥õ ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á …™…¥  ô·¥è·¥õ...ü§í\n·¥õ ú·¥á…¥ Íú±·¥á…¥·¥Ö  Ä·¥á·¥ò·¥è Ä·¥õ ·¥õ·¥è ·¥Ä·¥Ö·¥ç…™…¥...üìö\n ú·¥è·¥° ·¥õ·¥è Íú±·¥á…¥·¥Ö  Ä·¥á·¥ò·¥è Ä·¥õ...üëá\n\n/report Pushpa 2021\n/report Chhichhore 2019\n/report Vikings S01 E03\n/report Money Heist S03 E05\n\nüëâ ·¥Ö·¥è…¥'·¥õ Íú∞·¥è Ä…¢·¥á·¥õ  Ä·¥á ü·¥á·¥ÄÍú±·¥á  è·¥á·¥Ä Ä üëÄ</b>")
        await asyncio.sleep(30)
        await m.delete()
        return
    a=await message.reply_text(text=f" è·¥è·¥ú Ä  Ä·¥á·¥ò·¥è Ä·¥õ …™Íú± Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è\nÍú±·¥á…¥·¥Ö·¥á·¥Ö ·¥õ·¥è ·¥Ä·¥Ö·¥ç…™…¥...‚úÖ")
    await asyncio.sleep(3)
    await a.delete()
    await client.send_message(REQST_CHANNEL,f"üìù #REQUESTED_CONTENT üìù\n\n ô·¥è·¥õ - {temp.B_NAME}\n…¥·¥Ä·¥ç·¥á - {message.from_user.mention} (<code>{message.from_user.id}</code>)\nR·¥á«´·¥ú·¥áÍú±·¥õ - <code>{requested_movie}</code>",
    reply_markup=InlineKeyboardMarkup(
        [[
            InlineKeyboardButton('Not ReleaseüìÖ', callback_data=f"not_release:{user_id}:{requested_movie}"),
        ],[
            InlineKeyboardButton('Already AvailableüïµÔ∏è', callback_data=f"already_available:{user_id}:{requested_movie}"),
            InlineKeyboardButton('Not AvailableüôÖ', callback_data=f"not_available:{user_id}:{requested_movie}")
        ],[
            InlineKeyboardButton('Uploaded Done‚úÖ', callback_data=f"uploaded:{user_id}:{requested_movie}")
        ],[
            InlineKeyboardButton('Series Msgüìù', callback_data=f"series:{user_id}:{requested_movie}"),
            InlineKeyboardButton('Spell Msg‚úçÔ∏è', callback_data=f"spelling_error:{user_id}:{requested_movie}")
        ],[
            InlineKeyboardButton('üîô ·¥Ñ ü·¥èÍú±·¥á üîö', callback_data='close_data')]
        ]))
        
@Client.on_message(filters.command("send_msg_usr") & filters.user(ADMINS))
async def send_msg(bot, message):
    if message.reply_to_message:
        target_id = message.text.split(" ", 1)[1]
        out = "Us·¥á Äs S·¥Ä·¥†·¥á·¥Ö I…¥ DB A Ä·¥á:\n\n"
        success = False
        try:
            user = await bot.get_users(target_id)
            users = await db.get_all_users()
            async for usr in users:
                out += f"{usr['id']}"
                out += '\n'
            if str(user.id) in str(out):
                await message.reply_to_message.copy(int(user.id))
                success = True
            else:
                success = False
            if success:
                await message.reply_text(f"<b>Y·¥è·¥ú Ä ·¥ç·¥áss·¥Ä…¢·¥á  ú·¥Äs  ô·¥á·¥á…¥ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è s·¥á…¥·¥Ö ·¥õ·¥è {user.mention}.</b>")
            else:
                await message.reply_text("<b>T ú…™s ·¥ús·¥á Ä ·¥Ö…™·¥Ö…¥'·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥õ ú…™s  ô·¥è·¥õ  è·¥á·¥õ!</b>")
        except Exception as e:
            await message.reply_text(f"<b>E Ä Ä·¥è Ä: {e}</b>")
    else:
        await message.reply_text("<b>Reply With Your Massage\n\nEx : /send ·¥ús·¥á Ä…™·¥Ö</b>")
@Client.on_message(filters.command("ucast") & filters.user(ADMINS))
async def send_mssg(bot, message):
    if message.reply_to_message:
        target_id = message.text.split(" ", 1)[1]
        out = "Us·¥á Äs S·¥Ä·¥†·¥á·¥Ö I…¥ DB A Ä·¥á:\n\n"
        success = False
        try:
            user = await bot.get_users(target_id)
            users = await db.get_all_users()
            async for usr in users:
                out += f"{usr['id']}"
                out += '\n'
            if str(user.id) in str(out):
                await message.reply_to_message.copy(int(user.id))
                success = True
            else:
                success = False
            if success:
                await message.reply_text(f"<b>Y·¥è·¥ú Ä ·¥ç·¥áss·¥Ä…¢·¥á  ú·¥Äs  ô·¥á·¥á…¥ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è s·¥á…¥·¥Ö ·¥õ·¥è {user.mention}.</b>")
            else:
                await message.reply_text("<b>T ú…™s ·¥ús·¥á Ä ·¥Ö…™·¥Ö…¥'·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥õ ú…™s  ô·¥è·¥õ  è·¥á·¥õ!</b>")
        except Exception as e:
            await message.reply_text(f"<b>E Ä Ä·¥è Ä: {e}</b>")
    else:
        await message.reply_text("<b>Us·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Äs ·¥Ä  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä…¥ è ·¥ç·¥áss·¥Ä…¢·¥á ·¥ús…™…¥…¢ ·¥õ ú·¥á ·¥õ·¥Ä Ä…¢·¥á·¥õ ·¥Ñ ú·¥Ä·¥õ …™·¥Ö. F·¥è Ä ·¥á…¢: /send ·¥ús·¥á Ä…™·¥Ö</b>")
@Client.on_message(filters.command("deletefiles") & filters.user(ADMINS))
async def deletemultiplefiles(bot, message):
    chat_type = message.chat.type
    if chat_type != enums.ChatType.PRIVATE:
        return await message.reply_text(f"<b>H·¥á è {message.from_user.mention}, T ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è…¥'·¥õ ·¥°·¥è Ä·¥ã …™…¥ …¢ Ä·¥è·¥ú·¥òs. I·¥õ ·¥è…¥ ü è ·¥°·¥è Ä·¥ãs ·¥è…¥ ·¥ç è PM!</b>")
    else:
        pass
    try:
        keyword = message.text.split(" ", 1)[1]
    except:
        return await message.reply_text(f"<b>H·¥á è {message.from_user.mention}, G…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥ã·¥á è·¥°·¥è Ä·¥Ö ·¥Ä ü·¥è…¥…¢ ·¥°…™·¥õ ú ·¥õ ú·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á “ì…™ ü·¥ás.</b>")
    btn = [[
       InlineKeyboardButton("Y·¥ás, C·¥è…¥·¥õ…™…¥·¥ú·¥á !", callback_data=f"killfilesdq#{keyword}")
       ],[
       InlineKeyboardButton("N·¥è, A ô·¥è Ä·¥õ ·¥è·¥ò·¥á Ä·¥Ä·¥õ…™·¥è…¥ !", callback_data="close_data")
    ]]
    await message.reply_text(
        text="<b>A Ä·¥á  è·¥è·¥ú s·¥ú Ä·¥á? D·¥è  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á?\n\nN·¥è·¥õ·¥á:- T ú…™s ·¥Ñ·¥è·¥ú ü·¥Ö  ô·¥á ·¥Ä ·¥Ö·¥ás·¥õ Ä·¥ú·¥Ñ·¥õ…™·¥†·¥á ·¥Ä·¥Ñ·¥õ…™·¥è…¥!</b>",
        reply_markup=InlineKeyboardMarkup(btn),
        parse_mode=enums.ParseMode.HTML
    )

@Client.on_message(filters.command("set_urlshortlink"))
async def shortlink(bot, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f" è·¥è·¥ú' Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥, ·¥õ·¥ú Ä…¥ ·¥èÍú∞Íú∞ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥õ ú…™Íú± ·¥Ä…¢·¥Ä…™…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text(f"<b> ú·¥á è {message.from_user.mention}, ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è…¥ ü è ·¥°·¥è Ä·¥ãÍú± …™…¥ …¢ Ä·¥è·¥ú·¥òÍú± !")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    data = message.text
    userid = message.from_user.id
    user = await bot.get_chat_member(grpid, userid)
    if user.status != enums.ChatMemberStatus.ADMINISTRATOR and user.status != enums.ChatMemberStatus.OWNER and str(userid) not in ADMINS:
        return await message.reply_text("<b>·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥è·¥°…¥·¥á Ä ·¥è Ä ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥Ä…¥ ·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö !</b>")
    else:
        pass
    try:
        command, shortlink_url, api = data.split(" ")
    except:
        return await message.reply_text("<b>·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á !\n…¢…™·¥†·¥á ·¥ç·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ä ü·¥è…¥…¢ ·¥°…™·¥õ ú Íú± ú·¥è Ä·¥õ…¥·¥á Ä ·¥°·¥á ôÍú±…™·¥õ·¥á ·¥Ä…¥·¥Ö ·¥Ä·¥ò…™.\n\nÍú∞·¥è Ä·¥ç·¥Ä·¥õ : <code>/shortlink krishnalink.com c8dacdff6e91a8e4b4f093fdb4d8ae31bc273c1a</code>")
    reply = await message.reply_text("<b>·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ...</b>")
    shortlink_url = re.sub(r"https?://?", "", shortlink_url)
    shortlink_url = re.sub(r"[:/]", "", shortlink_url)
    await save_group_settings(grpid, 'shortlink', shortlink_url)
    await save_group_settings(grpid, 'shortlink_api', api)
    await save_group_settings(grpid, 'is_shortlink', True)
    await reply.edit_text(f"<b>‚úÖ Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ä·¥Ö·¥Ö·¥á·¥Ö Íú± ú·¥è Ä·¥õ ü…™…¥·¥ã Íú∞·¥è Ä <code>{title}</code>.\n\nÍú± ú·¥è Ä·¥õ ü…™…¥·¥ã ·¥°·¥á ôÍú±…™·¥õ·¥á : <code>{shortlink_url}</code>\nÍú± ú·¥è Ä·¥õ ü…™…¥·¥ã ·¥Ä·¥ò…™ : <code>{api}</code></b>")
 
@Client.on_message(filters.command("urlshortlink_off"))
async def offshortlink(bot, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f" è·¥è·¥ú' Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥, ·¥õ·¥ú Ä…¥ ·¥èÍú∞Íú∞ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥õ ú…™Íú± ·¥Ä…¢·¥Ä…™…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text("·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ãÍú± ·¥è…¥ ü è …™…¥ …¢ Ä·¥è·¥ú·¥òÍú± !")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    data = message.text
    userid = message.from_user.id
    user = await bot.get_chat_member(grpid, userid)
    if user.status != enums.ChatMemberStatus.ADMINISTRATOR and user.status != enums.ChatMemberStatus.OWNER and str(userid) not in ADMINS:
        return await message.reply_text("<b>·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥è·¥°…¥·¥á Ä ·¥è Ä ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥Ä…¥ ·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö !</b>")
    else:
        await save_group_settings(grpid, 'is_shortlink', False)
        ENABLE_SHORTLINK = False
        return await message.reply_text("Íú± ú·¥è Ä·¥õ ü…™…¥·¥ã Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö…™Íú±·¥Ä ô ü·¥á·¥Ö.")
    
@Client.on_message(filters.command("urlshortlink_on"))
async def onshortlink(bot, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f" è·¥è·¥ú' Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥, ·¥õ·¥ú Ä…¥ ·¥èÍú∞Íú∞ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥õ ú…™Íú± ·¥Ä…¢·¥Ä…™…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text("·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ãÍú± ·¥è…¥ ü è …™…¥ …¢ Ä·¥è·¥ú·¥òÍú± !")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    data = message.text
    userid = message.from_user.id
    user = await bot.get_chat_member(grpid, userid)
    if user.status != enums.ChatMemberStatus.ADMINISTRATOR and user.status != enums.ChatMemberStatus.OWNER and str(userid) not in ADMINS:
        return await message.reply_text("<b>·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥è·¥°…¥·¥á Ä ·¥è Ä ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥Ä…¥ ·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö !</b>")
    else:
        await save_group_settings(grpid, 'is_shortlink', True)
        ENABLE_SHORTLINK = True
        return await message.reply_text("Íú± ú·¥è Ä·¥õ ü…™…¥·¥ã Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥á…¥·¥Ä ô ü·¥á·¥Ö.")
        
@Client.on_message(filters.command("urlshortlink_info"))
async def ginfo(bot, message):
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text(f"<b>{message.from_user.mention},\n\n·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò.</b>")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    chat_id=message.chat.id
    userid = message.from_user.id
    user = await bot.get_chat_member(grpid, userid)
#     if 'shortlink' in settings.keys():
#         su = settings['shortlink']
#         sa = settings['shortlink_api']
#     else:
#         return await message.reply_text("<b>Shortener Url Not Connected\n\nYou can Connect Using /shortlink command</b>")
#     if 'tutorial' in settings.keys():
#         st = settings['tutorial']
#     else:
#         return await message.reply_text("<b>Tutorial Link Not Connected\n\nYou can Connect Using /set_tutorial command</b>")
    if user.status != enums.ChatMemberStatus.ADMINISTRATOR and user.status != enums.ChatMemberStatus.OWNER and str(userid) not in ADMINS:
        return await message.reply_text("<b>·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥è·¥°…¥·¥á Ä ·¥è Ä ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥Ä…¥ ·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö !</b>")
    else:
        settings = await get_settings(chat_id) #fetching settings for group
        if 'shortlink' in settings.keys() and 'tutorial' in settings.keys():
            su = settings['shortlink']
            sa = settings['shortlink_api']
            st = settings['tutorial']
            return await message.reply_text(f"<b><u>·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ  Íú±·¥õ·¥Ä·¥õ·¥úÍú±<u> üìä\n\n·¥°·¥á ôÍú±…™·¥õ·¥á : <code>{su}</code>\n\n·¥Ä·¥ò…™ : <code>{sa}</code>\n\n·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü : {st}</b>", disable_web_page_preview=True)
        elif 'shortlink' in settings.keys() and 'tutorial' not in settings.keys():
            su = settings['shortlink']
            sa = settings['shortlink_api']
            return await message.reply_text(f"<b><u>·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ  Íú±·¥õ·¥Ä·¥õ·¥úÍú±<u> üìä\n\n·¥°·¥á ôÍú±…™·¥õ·¥á : <code>{su}</code>\n\n·¥Ä·¥ò…™ : <code>{sa}</code>\n\n·¥úÍú±·¥á /set_tutorial ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è Íú±·¥á·¥õ  è·¥è·¥ú Ä ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü.")
        elif 'shortlink' not in settings.keys() and 'tutorial' in settings.keys():
            st = settings['tutorial']
            return await message.reply_text(f"<b>·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü : <code>{st}</code>\n\n·¥úÍú±·¥á  /shortlink  ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö  ·¥õ·¥è  ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ   è·¥è·¥ú Ä  Íú± ú·¥è Ä·¥õ…¥·¥á Ä</b>")
        else:
            return await message.reply_text("Íú± ú·¥è Ä·¥õ…¥·¥á Ä ·¥Ä…¥·¥Ö ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö.\n\n·¥Ñ ú·¥á·¥Ñ·¥ã /set_tutorial  ·¥Ä…¥·¥Ö  /shortlink  ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")

@Client.on_message(filters.command("set_tutorial"))
async def settutorial(bot, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f" è·¥è·¥ú' Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥, ·¥õ·¥ú Ä…¥ ·¥èÍú∞Íú∞ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text("·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥°·¥è Ä·¥ãÍú± ·¥è…¥ ü è …™…¥ …¢ Ä·¥è·¥ú·¥òÍú± !")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    data = message.text
    userid = message.from_user.id
    user = await bot.get_chat_member(grpid, userid)
    if user.status != enums.ChatMemberStatus.ADMINISTRATOR and user.status != enums.ChatMemberStatus.OWNER and str(userid) not in ADMINS:
        return await message.reply_text("<b>·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥è·¥°…¥·¥á Ä ·¥è Ä ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥Ä…¥ ·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö !</b>")
    else:
        pass
    if len(message.command) == 1:
        return await message.reply("<b>…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü  ü…™…¥·¥ã ·¥Ä ü·¥è…¥…¢ ·¥°…™·¥õ ú ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.\n\n·¥úÍú±·¥Ä…¢·¥á : /set_tutorial <code>https://t.me/HowToOpenHP</code></b>")
    elif len(message.command) == 2:
        reply = await message.reply_text("<b>·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ...</b>")
        tutorial = message.command[1]
        await save_group_settings(grpid, 'tutorial', tutorial)
        await save_group_settings(grpid, 'is_tutorial', True)
        await reply.edit_text(f"<b>‚úÖ Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü\n\n è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò : {title}\n\n è·¥è·¥ú Ä ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü : <code>{tutorial}</code></b>")
    else:
        return await message.reply("<b> è·¥è·¥ú ·¥á…¥·¥õ·¥á Ä·¥á·¥Ö …™…¥·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ Íú∞·¥è Ä·¥ç·¥Ä·¥õ !\n·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ Íú∞·¥è Ä·¥ç·¥Ä·¥õ : /set_tutorial <code>https://t.me/HowToOpenHP</code></b>")

@Client.on_message(filters.command("remove_tutorial"))
async def removetutorial(bot, message):
    userid = message.from_user.id if message.from_user else None
    if not userid:
        return await message.reply(f" è·¥è·¥ú' Ä·¥á ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥, ·¥õ·¥ú Ä…¥ ·¥èÍú∞Íú∞ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥úÍú± ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.")
    chat_type = message.chat.type
    if chat_type == enums.ChatType.PRIVATE:
        return await message.reply_text("·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥è…¥ ü è ·¥°·¥è Ä·¥ãÍú± …™…¥ …¢ Ä·¥è·¥ú·¥òÍú± !")
    elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        grpid = message.chat.id
        title = message.chat.title
    else:
        return
    data = message.text
    userid = message.from_user.id
    user = await bot.get_chat_member(grpid, userid)
    if user.status != enums.ChatMemberStatus.ADMINISTRATOR and user.status != enums.ChatMemberStatus.OWNER and str(userid) not in ADMINS:
        return await message.reply_text("<b>·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥è·¥°…¥·¥á Ä ·¥è Ä ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥Ä…¥ ·¥úÍú±·¥á ·¥õ ú…™Íú± ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö !</b>")
    else:
        pass
    reply = await message.reply_text("<b>·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ...</b>")
    await save_group_settings(grpid, 'is_tutorial', False)
    await reply.edit_text(f"<b>Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö ·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü  ü…™…¥·¥ã ‚úÖ</b>")

@Client.on_message(filters.command("refresh_argv") & filters.user(ADMINS))
async def stop_button(bot, message):
    msg = await bot.send_message(text="<b><i> ô·¥è·¥õ …™Íú±  Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ…™…¥…¢</i></b>", chat_id=message.chat.id)       
    await asyncio.sleep(3)
    await msg.edit("<b><i><u> ô·¥è·¥õ …™Íú±  Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ·¥á·¥Ö</u> ‚úÖ</i></b>")
    os.execl(sys.executable, sys.executable, *sys.argv)

@Client.on_message(filters.command('delete_reffer') & filters.user(ADMINS))
async def remove_user(bot, message):
    if len(message.command) == 1:
        return await message.reply('give me  user id')
    user_id = message.command[1]
    try:
        user_id = int(user_id)
    except:
        user_id = user_id
    try:
        user_exit = db2.is_user_in_list(user_id)   
        db2.remove_user(user_id)
        if not user_exit:
            await message.reply("oops invalid user id") 
        else:
            await message.reply(
                text='user removed in refferal list'
            )
    except Exception as e:
        await message.reply(f'Error - {e}')

@Client.on_message(filters.command('reffer') )
async def refer(bot, message):
    try:
        user_id = message.from_user.id
        total = db2.get_refer_points(user_id)
        btn = [[
                InlineKeyboardButton(f"invite üîó", url=f"https://telegram.me/share/url?url=https://telegram.me/{temp.U_NAME}?start=reff_{user_id}"),
                InlineKeyboardButton(f"‚è≥{total}", callback_data=f"show_reff"),
                InlineKeyboardButton('üîô ·¥Ñ ü·¥èÍú±·¥á üîö', callback_data='close_data')
            ]]
        reply_markup = InlineKeyboardMarkup(btn)
        await message.reply_photo(
            photo="https://i2f9m2t2.rocketcdn.me/wp-content/uploads/2014/04/shutterstock_175386392.jpg",
            caption=f"<b> Ä·¥á“ì·¥á Ä Ä·¥á  è·¥è·¥ú Ä  ü…™…¥·¥ã ·¥õ·¥è  è·¥è·¥ú Ä “ì Ä…™·¥á…¥·¥Ös, “ì·¥Ä·¥ç…™ ü è, ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä…¥·¥Ö …¢ Ä·¥è·¥ú·¥ò ·¥õ·¥è …¢·¥á·¥õ “ì Ä·¥á·¥á ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç “ì·¥è Ä 1 ·¥ç·¥è…¥·¥õ ú\n\n Ä·¥á“ì·¥á Ä·¥Ä ü  ü…™…¥·¥ã - https://telegram.me/{temp.U_NAME}?start=reff_{user_id}\n\ns ú·¥Ä Ä·¥á ·¥õ ú…™s  ü…™…¥·¥ã ·¥°…™·¥õ ú  è·¥è·¥ú Ä “ì Ä…™·¥á…¥·¥Ös, ·¥á·¥Ä·¥Ñ ú ·¥õ…™·¥ç·¥á ·¥õ ú·¥á è ·¥ä·¥è…™…¥,   è·¥è·¥ú ·¥°…™ ü ü …¢·¥á·¥õ 10  Ä·¥á“ì“ì·¥á Ä·¥Ä ü ·¥ò·¥è…™…¥·¥õs ·¥Ä…¥·¥Ö ·¥Ä“ì·¥õ·¥á Ä {USER_POINT} ·¥ò·¥è…™…¥·¥õs  è·¥è·¥ú ·¥°…™ ü ü …¢·¥á·¥õ 1 ·¥ç·¥è…¥·¥õ ú ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥.\n\n ô·¥ú è ·¥ò·¥Ä…™·¥Ö ·¥ò ü·¥Ä…¥  ô è - /premium</b>",
            reply_markup=reply_markup
        ),
    except Exception as e:
        print (e) 
        await message.reply(f"error found \n\n{e}")
